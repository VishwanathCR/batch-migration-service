# Generic Flat File Creation with Spring Batch 5.2

Here's a generic implementation for creating a flat file with:
- One custom header row
- Multiple data rows
- One custom footer row

## Implementation

### 1. Configuration Class

```java
import org.springframework.batch.core.Job;
import org.springframework.batch.core.Step;
import org.springframework.batch.core.job.builder.JobBuilder;
import org.springframework.batch.core.repository.JobRepository;
import org.springframework.batch.core.step.builder.StepBuilder;
import org.springframework.batch.item.file.FlatFileFooterCallback;
import org.springframework.batch.item.file.FlatFileHeaderCallback;
import org.springframework.batch.item.file.FlatFileItemWriter;
import org.springframework.batch.item.file.builder.FlatFileItemWriterBuilder;
import org.springframework.batch.item.file.transform.PassThroughLineAggregator;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.io.FileSystemResource;
import org.springframework.transaction.PlatformTransactionManager;

import java.io.IOException;
import java.io.Writer;

@Configuration
public class FlatFileGenerationConfig {

    @Bean
    public Job flatFileGenerationJob(JobRepository jobRepository, Step generateFileStep) {
        return new JobBuilder("flatFileGenerationJob", jobRepository)
                .start(generateFileStep)
                .build();
    }

    @Bean
    public Step generateFileStep(JobRepository jobRepository, 
                               PlatformTransactionManager transactionManager,
                               FlatFileItemWriter<String> flatFileWriter) {
        return new StepBuilder("generateFileStep", jobRepository)
                .<String, String>chunk(10, transactionManager)
                .reader(itemReader()) // Implement your reader
                .writer(flatFileWriter)
                .build();
    }

    @Bean
    public FlatFileItemWriter<String> flatFileWriter() {
        return new FlatFileItemWriterBuilder<String>()
                .name("flatFileWriter")
                .resource(new FileSystemResource("output/output_file.txt"))
                .headerCallback(new CustomHeaderCallback())
                .footerCallback(new CustomFooterCallback())
                .lineAggregator(new PassThroughLineAggregator<>())
                .build();
    }

    // Implement your reader
    @Bean
    public YourItemReader itemReader() {
        return new YourItemReader(); // Replace with your actual reader implementation
    }
}
```

### 2. Custom Header Callback

```java
import org.springframework.batch.item.file.FlatFileHeaderCallback;

import java.io.IOException;
import java.io.Writer;

public class CustomHeaderCallback implements FlatFileHeaderCallback {

    @Override
    public void writeHeader(Writer writer) throws IOException {
        writer.write("HEADER|FILE_CREATION_DATE|20240529|VERSION|1.0");
    }
}
```

### 3. Custom Footer Callback

```java
import org.springframework.batch.item.file.FlatFileFooterCallback;

import java.io.IOException;
import java.io.Writer;

public class CustomFooterCallback implements FlatFileFooterCallback {

    @Override
    public void writeFooter(Writer writer) throws IOException {
        writer.write("FOOTER|TOTAL_RECORDS|100|END_OF_FILE");
    }
}
```

### 4. Generic Item Reader (Example)

```java
import org.springframework.batch.item.ItemReader;

public class YourItemReader implements ItemReader<String> {

    private int count = 0;
    private final int maxCount = 100; // Example: 100 data rows

    @Override
    public String read() {
        if (count < maxCount) {
            count++;
            return "DATA|RECORD_" + count + "|VALUE_" + count; // Example data format
        }
        return null; // null signals end of data
    }
}
```

## Usage Notes

1. **Customization**:
   - Modify `CustomHeaderCallback` and `CustomFooterCallback` to match your required header/footer formats
   - Adjust the data format in the reader to match your requirements

2. **File Format**:
   - The example uses pipe-delimited format, but you can change this to any format you need
   - For more complex data structures, implement a custom `LineAggregator` instead of `PassThroughLineAggregator`

3. **Performance**:
   - Adjust the chunk size in the step configuration based on your performance needs
   - For large files, consider using a more efficient reader implementation

4. **Error Handling**:
   - Add appropriate error handling and retry logic as needed
   - Consider implementing `ItemWriteListener` for additional control

This implementation provides a generic template that you can adapt to your specific requirements while maintaining the structure of one header, multiple data rows, and one footer.
